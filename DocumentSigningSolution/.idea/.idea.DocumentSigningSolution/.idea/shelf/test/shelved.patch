Index: DocumentSigningSolution.Infrastructure/Migrations/DocumentSigningSolutionDbContextModelSnapshot.cs
===================================================================
diff --git a/DocumentSigningSolution.Infrastructure/Migrations/DocumentSigningSolutionDbContextModelSnapshot.cs b/DocumentSigningSolution.Infrastructure/Migrations/DocumentSigningSolutionDbContextModelSnapshot.cs
deleted file mode 100644
--- a/DocumentSigningSolution.Infrastructure/Migrations/DocumentSigningSolutionDbContextModelSnapshot.cs	(revision 7c101f1435391036767dc59e5c134dbadf4c30c5)
+++ /dev/null	(revision 7c101f1435391036767dc59e5c134dbadf4c30c5)
@@ -1,83 +0,0 @@
-// <auto-generated />
-using System;
-using DocumentSigningSolution.Infrastructure.Persistence;
-using Microsoft.EntityFrameworkCore;
-using Microsoft.EntityFrameworkCore.Infrastructure;
-using Microsoft.EntityFrameworkCore.Metadata;
-using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
-
-#nullable disable
-
-namespace DocumentSigningSolution.Infrastructure.Migrations
-{
-    [DbContext(typeof(DocumentSigningSolutionDbContext))]
-    partial class DocumentSigningSolutionDbContextModelSnapshot : ModelSnapshot
-    {
-        protected override void BuildModel(ModelBuilder modelBuilder)
-        {
-#pragma warning disable 612, 618
-            modelBuilder
-                .HasAnnotation("ProductVersion", "9.0.4")
-                .HasAnnotation("Relational:MaxIdentifierLength", 128);
-
-            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
-
-            modelBuilder.Entity("DocumentSigningSolution.Domain.DocumentAggregate.Document", b =>
-                {
-                    b.Property<Guid>("Id")
-                        .HasColumnType("uniqueidentifier");
-
-                    b.Property<DateTime>("CreatedAt")
-                        .HasColumnType("datetime2");
-
-                    b.Property<string>("Name")
-                        .IsRequired()
-                        .HasMaxLength(100)
-                        .HasColumnType("nvarchar(100)");
-
-                    b.Property<string>("Path")
-                        .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
-
-                    b.Property<int>("Status")
-                        .HasColumnType("int");
-
-                    b.Property<DateTime>("UpdatedAt")
-                        .HasColumnType("datetime2");
-
-                    b.HasKey("Id");
-
-                    b.HasIndex("Name", "Path")
-                        .IsUnique();
-
-                    b.ToTable("Documents", (string)null);
-                });
-
-            modelBuilder.Entity("DocumentSigningSolution.Domain.FolderAggregate.Folder", b =>
-                {
-                    b.Property<Guid>("Id")
-                        .HasColumnType("uniqueidentifier");
-
-                    b.Property<DateTime>("CreatedAt")
-                        .HasColumnType("datetime2");
-
-                    b.Property<string>("Path")
-                        .IsRequired()
-                        .HasMaxLength(200)
-                        .HasColumnType("nvarchar(200)");
-
-                    b.Property<DateTime>("UpdatedAt")
-                        .HasColumnType("datetime2");
-
-                    b.HasKey("Id");
-
-                    b.HasIndex("Path")
-                        .IsUnique();
-
-                    b.ToTable("Folders", (string)null);
-                });
-#pragma warning restore 612, 618
-        }
-    }
-}
Index: DocumentSigningSolution.Api/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\n\nusing DocumentSigningSolution.Infrastructure.Persistence;\n\nusing Microsoft.EntityFrameworkCore;\n\nvar builder = WebApplication.CreateBuilder(args);\n{\n    if (builder.Environment.IsProduction())\n    {\n        builder.Configuration.AddAzureKeyVault(\n            new Uri(Environment.GetEnvironmentVariable(\"VaultUri\")!),\n            new DefaultAzureCredential());\n    }\n\n    if (builder.Environment.IsDevelopment())\n    {\n        builder.WebHost.ConfigureKestrel((context, options) =>\n        {\n            options.Configure(context.Configuration.GetSection(\"Kestrel\"));\n        });\n    }\n    builder.Services.AddShared();\n    builder.Services\n        .AddPresentation()\n        .AddApplication()\n        .AddInfrastructure(builder.Configuration);\n}\n\nvar app = builder.Build();\n{\n    if (app.Environment.IsDevelopment())\n    {\n        using var scope = app.Services.CreateScope();\n        var dbContext = scope.ServiceProvider.GetRequiredService<DocumentSigningSolutionDbContext>();\n        await dbContext.Database.MigrateAsync();\n    }\n\n    app.UseExceptionHandler(\"/error\");\n\n    if (!app.Environment.IsDevelopment())\n    {\n        app.UseHttpsRedirection();\n    }\n    app.UseAuthentication();\n    app.UseAuthorization();\n    app.MapControllers();\n    app.Run();\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DocumentSigningSolution.Api/Program.cs b/DocumentSigningSolution.Api/Program.cs
--- a/DocumentSigningSolution.Api/Program.cs	(revision 7c101f1435391036767dc59e5c134dbadf4c30c5)
+++ b/DocumentSigningSolution.Api/Program.cs	(date 1746795315828)
@@ -31,9 +31,22 @@
 {
     if (app.Environment.IsDevelopment())
     {
-        using var scope = app.Services.CreateScope();
+        var scope = app.Services.CreateScope();
         var dbContext = scope.ServiceProvider.GetRequiredService<DocumentSigningSolutionDbContext>();
-        await dbContext.Database.MigrateAsync();
+        try
+        {
+            await dbContext.Database.MigrateAsync();
+        }
+        catch (Exception ex)
+        {
+            Console.WriteLine("Migration failed: " + ex.Message);
+            Console.WriteLine("Deleting and recreating the database...");
+
+            await dbContext.Database.EnsureDeletedAsync();
+            await dbContext.Database.MigrateAsync();
+        }
+        
+        
     }
 
     app.UseExceptionHandler("/error");
